DecisionTreeRegressor,HistGradientBoostingRegressor,KNeighborsRegressor,LinearRegression,RandomForestRegressor,MLPRegressor
"GridSearchCV(estimator=Pipeline(steps=[('dtr', DecisionTreeRegressor())]),
             param_grid=[{'dtr__max_depth': [3, 4, 5, 6],
                          'dtr__min_samples_leaf': [10, 12],
                          'dtr__min_samples_split': [30, 40]}])","GridSearchCV(estimator=Pipeline(steps=[('hgbr',
                                        HistGradientBoostingRegressor())]),
             param_grid=[{'hgbr__loss': ['squared_error', 'absolute_error'],
                          'hgbr__max_bins': [10, 100, 255],
                          'hgbr__max_iter': [100, 150],
                          'hgbr__min_samples_leaf': [10, 12]}])","GridSearchCV(estimator=Pipeline(steps=[('transform',
                                        ColumnTransformer(transformers=[('num',
                                                                         StandardScaler(),
                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x156b6c850>),
                                                                        ('cat',
                                                                         OneHotEncoder(handle_unknown='ignore'),
                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x156b6c130>)])),
                                       ('knr', KNeighborsRegressor())]),
             param_grid=[{'knr__n_neighbors': [3, 5, 10]}])","GridSearchCV(estimator=Pipeline(steps=[('lr', LinearRegression())]),
             param_grid=[{}])","GridSearchCV(estimator=Pipeline(steps=[('rfr', RandomForestRegressor())]),
             param_grid=[{'rfr__max_depth': [3, 4, 5, 6],
                          'rfr__max_features': ['sqrt', 'log2'],
                          'rfr__min_samples_leaf': [10, 12],
                          'rfr__min_samples_split': [30, 40],
                          'rfr__n_estimators': [100, 150]}])","GridSearchCV(estimator=Pipeline(steps=[('transform',
                                        ColumnTransformer(transformers=[('num',
                                                                         StandardScaler(),
                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x156b6c850>),
                                                                        ('cat',
                                                                         OneHotEncoder(handle_unknown='ignore'),
                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x156b6c130>)])),
                                       ('mlp', MLPRegressor())]),
             param_grid=[{'mlp__alpha': [0.01, 0.001],
                          'mlp__hidden_layer_sizes': [(10, 10), (5, 5)],
                          'mlp__max_iter': [100, 200]}])"
"{'dtr__max_depth': 3, 'dtr__min_samples_leaf': 10, 'dtr__min_samples_split': 30}","{'hgbr__loss': 'squared_error', 'hgbr__max_bins': 100, 'hgbr__max_iter': 100, 'hgbr__min_samples_leaf': 12}",{'knr__n_neighbors': 10},{},"{'rfr__max_depth': 5, 'rfr__max_features': 'sqrt', 'rfr__min_samples_leaf': 10, 'rfr__min_samples_split': 40, 'rfr__n_estimators': 100}","{'mlp__alpha': 0.001, 'mlp__hidden_layer_sizes': (5, 5), 'mlp__max_iter': 100}"
